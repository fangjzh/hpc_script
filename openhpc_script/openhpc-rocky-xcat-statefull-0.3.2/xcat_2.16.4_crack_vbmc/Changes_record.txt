 cd /opt/xcat/lib/perl

vi xCAT/Schema.pm
-------------------------------------------- 
 ipmi => {
        cols => [qw(node bmc port bmcport taggedvlan bmcid username password comments disable )],
        keys => [qw(node)],
        table_desc => 'Settings for nodes that are controlled by an on-board BMC via IPMI.',
        descriptions => {
            node => 'The node name or group name.',
            bmc  => 'The hostname of the BMC adapter.',
            port  => 'The port of the ipmi traffic (UDP).',
            bmcport => 'In systems with selectable shared/dedicated ethernet ports, this parameter can be used to specify the preferred port. 0 means use the shared port, 1 means dedicated, blank is to not assign.

--------------------------------------------
##################
    #  ipmi table    #
##################
    { attr_name => 'bmc',
        only_if         => 'mgt=ipmi',
        tabentry        => 'ipmi.bmc',
        access_tabentry => 'ipmi.node=attr:node',
    },
    { attr_name => 'port',
        only_if         => 'mgt=ipmi',
        tabentry        => 'ipmi.port',
        access_tabentry => 'ipmi.node=attr:node',
    },


-----------------------------------------------------------------
systemctl restart xcatd

nodech compute nodehm.power=ipmi nodehm.mgt=ipmi
nodech cnode01 ipmi.bmc=10.0.0.2 ipmi.port=6201  ipmi.username=admin ipmi.password=password
nodech cnode02 ipmi.bmc=10.0.0.2 ipmi.port=6202  ipmi.username=admin ipmi.password=password

lsdef -t node cnode01

-----------------------------------------------------------------

vi  xCAT/IPMI.pm
-------------------
    unless ($args{'port'}) {    #default to port 623 unless specified
        $self->{'port'} = 623;
    }
    else
    {
        $self->{'port'} = $args{'port'} ;
    }



-----------------------------------------------------------------
vi  xCAT_plugin/ipmi.pm   找 ipmihash 关键词
-------------------
sub reseat_node {
......
        my $ipmitab = xCAT::Table->new("ipmi");
        my $ipmihash = $ipmitab->getNodesAttribs([$fpc], [ 'bmc', 'username', 'password' , 'port' ]);
......
        my $nodeuser = $authdata->{$fpc}->{username};
        my $nodepass = $authdata->{$fpc}->{password};
        my $nodeport = $ipmihash->{$fpc}->[0]->{port};
......
            $sessdata->{fpcipmisession} = xCAT::IPMI->new(bmc => $mpent->{mpa}, userid => $nodeuser, password => $nodepass, port => $nodeport);
            $fpcsessions{$mpent->{mpa}} = $sessdata->{fpcipmisession};


------------------
sub process_request {
.......
    #my @threads;
    my @donargs = ();
...
    my $ipmihash = $ipmitab->getNodesAttribs($noderange, [ 'bmc', 'username', 'password', 'port' ]);
    my $authdata = xCAT::PasswordUtils::getIPMIAuth(noderange => $noderange, ipmihash => $ipmihash);
    foreach (@$noderange) {
        my $node     = $_;
        my $nodeuser = $authdata->{$node}->{username};
        my $nodepass = $authdata->{$node}->{password};
        my $nodeip   = $node;
        my $nodeport = $ipmihash->{$node}->[0]->{port};
        my $ent;
        if (defined($ipmitab)) {
            $ent = $ipmihash->{$node}->[0];
            if (ref($ent) and defined $ent->{bmc}) { $nodeip = $ent->{bmc}; }
        }
        if ($nodeip =~ /,/ and grep ({ $_ eq $request->{command}->[0] } qw/rinv reventlog rvitals rspconfig/)) { #multi-node x3950 X5, for example
            my $bmcnum = 1;
            foreach (split /,/, $nodeip) {
                push @donargs, [ $node, $_, $nodeport, $nodeuser, $nodepass, $bmcnum ];
                $bmcnum += 1;
            }
        } else {
            $nodeip =~ s/,.*//;    #stri
            push @donargs, [ $node, $nodeip, $nodeport, $nodeuser, $nodepass, 1 ];
        }
    }
......
    # NOTE (chenglch) rflash for one node need about 5-10 minutes. There is no need to rflash node
    # one by one, fork a process for each node.
    if ($command eq 'rflash') {
        start_rflash_processes(\@donargs, $ipmitimeout, $ipmitrys, $command, -args => \@exargs);
    }
    else {
        foreach (@donargs) {
            donode($_->[0], $_->[1], $_->[2], $_->[3], $_->[4], $_->[5], $ipmitimeout, $ipmitrys, $command, -args => \@exargs);
        }
        while (xCAT::IPMI->waitforrsp()) { yield }
    }

---------------
sub donode {
    my $node      = shift;
    my $bmcip     = shift;
    my $nodeport     = shift;
    my $user      = shift;
.......
	 #ipmisession => xCAT::IPMI->new(bmc => $bmcip, port => $nodeport, userid => $user, password => $pass),
.......
    $sessiondata{$node}->{ipmisession} = xCAT::IPMI->new(bmc => $bmcip, userid => $user, password => $pass, node => $node, port => $nodeport);
.........

----------------

	


-----------------------
sub getipmicons {
    my $argr = shift;

    #$argr is [$node,$nodeip,$nodeport,$nodeuser,$nodepass];
    my $cb = shift;
    my $ipmicons = { node => [ { name => [ $argr->[0] ] } ] };
    $ipmicons->{node}->[0]->{bmcaddr}->[0] = $argr->[1];
    $ipmicons->{node}->[0]->{nodeport}->[0] = $argr->[2];
    $ipmicons->{node}->[0]->{bmcuser}->[0] = $argr->[3];
    $ipmicons->{node}->[0]->{bmcpass}->[0] = $argr->[4];
    my $ipmisess = xCAT::IPMI->new(bmc => $argr->[1], port => $argr->[2], userid => $argr->[3], password => $argr->[4]);

-----------------------